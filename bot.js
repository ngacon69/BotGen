/**
 * @file Payout Bot - Phi√™n b·∫£n M·ªü r·ªông v√† Chuy√™n nghi·ªáp
 * @description M·ªôt bot Discord m·∫°nh m·∫Ω ƒë·ªÉ qu·∫£n l√Ω, ph√¢n ph·ªëi v√† theo d√µi kho t√†i kho·∫£n.
 * @version 3.0.0
 * @author YourName
 */

// =================================================================================================
// SECTION: IMPORTS & KH·ªûI T·∫†O BAN ƒê·∫¶U
// =================================================================================================

// Import c√°c module c·∫ßn thi·∫øt t·ª´ discord.js v√† c√°c th∆∞ vi·ªán kh√°c
const {
    Client, GatewayIntentBits, ActionRowBuilder, ModalBuilder,
    TextInputBuilder, TextInputStyle, StringSelectMenuBuilder, EmbedBuilder,
    SlashCommandBuilder, Routes, REST, Collection, ButtonBuilder,
    ButtonStyle, ChannelType
} = require('discord.js');
const { Pool } = require('pg');
require('dotenv').config();


// =================================================================================================
// SECTION: C·∫§U H√åNH TRUNG T√ÇM
// =================================================================================================

/**
 * @description Qu·∫£n l√Ω t·∫≠p trung th√¥ng tin v·ªÅ c√°c lo·∫°i d·ªãch v·ª•.
 * Vi·ªác n√†y gi√∫p d·ªÖ d√†ng th√™m, s·ª≠a, x√≥a d·ªãch v·ª• m√† kh√¥ng c·∫ßn thay ƒë·ªïi code ·ªü nhi·ªÅu n∆°i.
 * @type {Object.<string, {id: string, name: string, emoji: string}>}
 */
const SERVICE_CONFIG = {
    nfa: {
        id: 'nfa',
        name: 'Minecraft Non Full Access (NFA)',
        emoji: '‚õèÔ∏è',
    },
    fa: {
        id: 'fa',
        name: 'Minecraft Full Access (FA)',
        emoji: 'üíé',
    },
    xboxgp: {
        id: 'xboxgp',
        name: 'Xbox GamePass',
        emoji: 'üéÆ',
    },
};

// Link h∆∞·ªõng d·∫´n chung cho c√°c d·ªãch v·ª• c·∫ßn Full Access
const FULL_ACCESS_LINK = 'https://drive.google.com/file/u/0/d/1X1H3vy1UKJPEv5kiBp60LBMCm4AktH29/view?pli=1';

// C·∫•u h√¨nh th·ªùi gian ch·ªù (cooldown) cho l·ªánh /gen ƒë·ªÉ tr√°nh spam
const GEN_COOLDOWN_SECONDS = 300; // 5 ph√∫t


// =================================================================================================
// SECTION: KH·ªûI T·∫†O CLIENT & DATABASE
// =================================================================================================

// Kh·ªüi t·∫°o Discord Client v·ªõi c√°c quy·ªÅn (intents) c·∫ßn thi·∫øt
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.DirectMessages
    ]
});

// S·ª≠ d·ª•ng Collection ƒë·ªÉ qu·∫£n l√Ω cooldown m·ªôt c√°ch hi·ªáu qu·∫£
client.cooldowns = new Collection();

// K·∫øt n·ªëi ƒë·∫øn Database PostgreSQL
// ƒê·∫£m b·∫£o r·∫±ng bi·∫øn DATABASE_URL trong file .env ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng.
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});


// =================================================================================================
// SECTION: C√ÅC H√ÄM T∆Ø∆†NG T√ÅC V·ªöI DATABASE (T·∫ßng d·ªØ li·ªáu)
// =================================================================================================

/**
 * @description Kh·ªüi t·∫°o c·∫•u tr√∫c database, t·∫°o c√°c b·∫£ng c·∫ßn thi·∫øt n·∫øu ch√∫ng ch∆∞a t·ªìn t·∫°i.
 * B·ªï sung th√™m b·∫£ng `transactions` ƒë·ªÉ ghi log v√† c·ªôt `log_channel` ƒë·ªÉ l∆∞u k√™nh log.
 */
async function initializeDatabase() {
    try {
        await pool.query(`
            CREATE TABLE IF NOT EXISTS guild_settings (
                guild_id VARCHAR(255) PRIMARY KEY,
                payout_role VARCHAR(255) NOT NULL,
                log_channel VARCHAR(255)
            );
            
            CREATE TABLE IF NOT EXISTS accounts (
                id SERIAL PRIMARY KEY,
                guild_id VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL,
                password VARCHAR(255) NOT NULL,
                service_type VARCHAR(50) NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(guild_id, service_type, email) -- ƒê·∫£m b·∫£o kh√¥ng c√≥ t√†i kho·∫£n tr√πng l·∫∑p
            );

            CREATE TABLE IF NOT EXISTS transactions (
                id SERIAL PRIMARY KEY,
                guild_id VARCHAR(255) NOT NULL,
                user_id VARCHAR(255) NOT NULL,
                service_type VARCHAR(50) NOT NULL,
                account_email VARCHAR(255) NOT NULL,
                generated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        console.log('Database schema is verified and up-to-date.');
    } catch (error) {
        console.error('FATAL: Could not initialize database! Exiting...', error);
        process.exit(1); // D·ª´ng bot n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c kh·ªüi t·∫°o DB
    }
}

/**
 * @description L·∫•y th√¥ng tin c√†i ƒë·∫∑t c·ªßa m·ªôt server (guild).
 * @param {string} guildId ID c·ªßa server.
 * @returns {Promise<{payout_role: string, log_channel: string}|null>}
 */
async function getGuildSettings(guildId) {
    const result = await pool.query(
        'SELECT payout_role, log_channel FROM guild_settings WHERE guild_id = $1',
        [guildId]
    );
    return result.rows[0] || null;
}

/**
 * @description L∆∞u ho·∫∑c c·∫≠p nh·∫≠t c√†i ƒë·∫∑t Payout Role cho server.
 * @param {string} guildId - ID c·ªßa server.
 * @param {string} payoutRole - ID c·ªßa role.
 */
async function setGuildSettings(guildId, payoutRole) {
    await pool.query(
        `INSERT INTO guild_settings (guild_id, payout_role) VALUES ($1, $2) 
         ON CONFLICT (guild_id) DO UPDATE SET payout_role = EXCLUDED.payout_role`,
        [guildId, payoutRole]
    );
}

/**
 * @description L∆∞u ho·∫∑c c·∫≠p nh·∫≠t c√†i ƒë·∫∑t K√™nh Log cho server.
 * @param {string} guildId - ID c·ªßa server.
 * @param {string} logChannelId - ID c·ªßa k√™nh log.
 */
async function setLogChannel(guildId, logChannelId) {
    await pool.query(
        `UPDATE guild_settings SET log_channel = $1 WHERE guild_id = $2`,
        [logChannelId, guildId]
    );
}

/**
 * @description Th√™m nhi·ªÅu t√†i kho·∫£n v√†o kho m·ªôt l√∫c (bulk insert).
 * @param {string} guildId
 * @param {string} serviceType
 * @param {Array<{email: string, password: string}>} accounts
 * @returns {Promise<{successCount: number, failureCount: number}>}
 */
async function addMultipleAccounts(guildId, serviceType, accounts) {
    let successCount = 0;
    // S·ª≠ d·ª•ng transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        for (const account of accounts) {
            // ON CONFLICT DO NOTHING ƒë·ªÉ b·ªè qua c√°c t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i
            const res = await client.query(
                `INSERT INTO accounts (guild_id, email, password, service_type) 
                 VALUES ($1, $2, $3, $4) ON CONFLICT (guild_id, service_type, email) DO NOTHING`,
                [guildId, account.email, account.password, serviceType]
            );
            if (res.rowCount > 0) successCount++;
        }
        await client.query('COMMIT');
    } catch (e) {
        await client.query('ROLLBACK');
        throw e; // N√©m l·ªói ra ngo√†i ƒë·ªÉ x·ª≠ l√Ω ·ªü t·∫ßng tr√™n
    } finally {
        client.release();
    }
    return { successCount, failureCount: accounts.length - successCount };
}

/**
 * @description L·∫•y v√† x√≥a m·ªôt t√†i kho·∫£n ng·∫´u nhi√™n kh·ªèi kho.
 * @returns {Promise<object|null>} T√†i kho·∫£n ƒë∆∞·ª£c l·∫•y ho·∫∑c null n·∫øu h·∫øt h√†ng.
 */
async function getAndRemoveRandomAccount(guildId, serviceType) {
    const query = `
        DELETE FROM accounts
        WHERE id = (
            SELECT id FROM accounts
            WHERE guild_id = $1 AND service_type = $2
            ORDER BY RANDOM() LIMIT 1
        ) RETURNING *;`;
    const result = await pool.query(query, [guildId, serviceType]);
    return result.rows[0] || null;
}

/**
 * @description ƒê·∫øm s·ªë l∆∞·ª£ng t√†i kho·∫£n trong kho.
 * @returns {Promise<Array<{service_type: string, count: string}>>}
 */
async function getStockCount(guildId) {
    const result = await pool.query(
        `SELECT service_type, COUNT(*) as count FROM accounts WHERE guild_id = $1 GROUP BY service_type`,
        [guildId]
    );
    return result.rows;
}

/**
 * @description X√≥a T·∫§T C·∫¢ t√†i kho·∫£n c·ªßa m·ªôt d·ªãch v·ª• c·ª• th·ªÉ.
 * @returns {Promise<number>} S·ªë l∆∞·ª£ng t√†i kho·∫£n ƒë√£ b·ªã x√≥a.
 */
async function clearStockForService(guildId, serviceType) {
    const result = await pool.query(
        'DELETE FROM accounts WHERE guild_id = $1 AND service_type = $2',
        [guildId, serviceType]
    );
    return result.rowCount;
}

/**
 * @description Ghi l·∫°i giao d·ªãch khi m·ªôt t√†i kho·∫£n ƒë∆∞·ª£c t·∫°o ra.
 */
async function addTransaction(guildId, userId, serviceType, accountEmail) {
    await pool.query(
        'INSERT INTO transactions (guild_id, user_id, service_type, account_email) VALUES ($1, $2, $3, $4)',
        [guildId, userId, serviceType, accountEmail]
    );
}

/**
 * @description L·∫•y th√¥ng tin th·ªëng k√™ cho bot.
 * @returns {Promise<{totalStock: number, totalGenerated: number}>}
 */
async function getBotStats(guildId) {
    const stockPromise = pool.query('SELECT COUNT(*) FROM accounts WHERE guild_id = $1', [guildId]);
    const generatedPromise = pool.query('SELECT COUNT(*) FROM transactions WHERE guild_id = $1', [guildId]);
    const [stockResult, generatedResult] = await Promise.all([stockPromise, generatedPromise]);
    return {
        totalStock: parseInt(stockResult.rows[0].count, 10),
        totalGenerated: parseInt(generatedResult.rows[0].count, 10)
    };
}


// =================================================================================================
// SECTION: H√ÄM TI·ªÜN √çCH & H·ªñ TR·ª¢
// =================================================================================================

/**
 * @description Ki·ªÉm tra quy·ªÅn h·∫°n Payout Role c·ªßa ng∆∞·ªùi d√πng.
 * @returns {Promise<boolean>} Tr·∫£ v·ªÅ true n·∫øu c√≥ quy·ªÅn, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ false v√† t·ª± ƒë·ªông tr·∫£ l·ªùi interaction.
 */
async function hasPayoutPermission(interaction) {
    // Qu·∫£n tr·ªã vi√™n lu√¥n c√≥ quy·ªÅn
    if (interaction.member.permissions.has('Administrator')) return true;

    const settings = await getGuildSettings(interaction.guild.id);
    if (!settings?.payout_role) {
        const errorEmbed = new EmbedBuilder().setColor(0xFF0000).setTitle('L·ªói: Ch∆∞a c√†i ƒë·∫∑t').setDescription('Server n√†y ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng y√™u c·∫ßu qu·∫£n tr·ªã vi√™n ch·∫°y l·ªánh `/setup`.');
        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        return false;
    }

    if (!interaction.member.roles.cache.has(settings.payout_role)) {
        const errorEmbed = new EmbedBuilder().setColor(0xFF0000).setTitle('L·ªói: Kh√¥ng c√≥ quy·ªÅn').setDescription(`B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. C·∫ßn c√≥ role <@&${settings.payout_role}>.`);
        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        return false;
    }
    return true;
}

/**
 * @description G·ª≠i m·ªôt tin nh·∫Øn log ƒë·∫øn k√™nh ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.
 * @param {import('discord.js').Interaction} interaction
 * @param {EmbedBuilder} embed - Embed ƒë·ªÉ g·ª≠i ƒëi.
 */
async function sendLog(interaction, embed) {
    const settings = await getGuildSettings(interaction.guild.id);
    if (!settings?.log_channel) return;

    try {
        const logChannel = await interaction.guild.channels.fetch(settings.log_channel);
        if (logChannel && logChannel.isTextBased()) {
            await logChannel.send({ embeds: [embed] });
        }
    } catch (error) {
        console.error(`Could not send log to channel ${settings.log_channel} in guild ${interaction.guild.id}. It might have been deleted.`, error);
    }
}


// =================================================================================================
// SECTION: ƒêƒÇNG K√ù SLASH COMMANDS
// =================================================================================================

const commands = [
    new SlashCommandBuilder()
        .setName('setup')
        .setDescription('C√†i ƒë·∫∑t ho·∫∑c c·∫≠p nh·∫≠t c·∫•u h√¨nh bot payout cho server.')
        .setDMPermission(false)
        .setDefaultMemberPermissions('0') // Y√™u c·∫ßu quy·ªÅn Administrator
        .addChannelOption(option =>
            option.setName('log_channel')
                .setDescription('T√πy ch·ªçn: K√™nh ƒë·ªÉ ghi l·∫°i c√°c ho·∫°t ƒë·ªông quan tr·ªçng c·ªßa bot.')
                .addChannelTypes(ChannelType.GuildText)
                .setRequired(false)),
    new SlashCommandBuilder()
        .setName('addstock-bulk')
        .setDescription('Th√™m h√†ng lo·∫°t t√†i kho·∫£n v√†o kho t·ª´ m·ªôt danh s√°ch.')
        .setDMPermission(false)
        .addStringOption(option =>
            option.setName('service')
                .setDescription('Lo·∫°i d·ªãch v·ª• c·ªßa c√°c t√†i kho·∫£n c·∫ßn th√™m')
                .setRequired(true)
                .addChoices(...Object.values(SERVICE_CONFIG).map(s => ({ name: s.name, value: s.id }))))
        .addAttachmentOption(option =>
            option.setName('file')
                .setDescription('File .txt ch·ª©a danh s√°ch t√†i kho·∫£n (ƒë·ªãnh d·∫°ng email:password)')
                .setRequired(true)),
    new SlashCommandBuilder()
        .setName('gen')
        .setDescription('L·∫•y m·ªôt t√†i kho·∫£n ng·∫´u nhi√™n t·ª´ kho (y√™u c·∫ßu Payout Role).')
        .setDMPermission(false)
        .addStringOption(option =>
            option.setName('service')
                .setDescription('Ch·ªçn lo·∫°i d·ªãch v·ª• b·∫°n mu·ªën l·∫•y')
                .setRequired(true)
                .addChoices(...Object.values(SERVICE_CONFIG).map(s => ({ name: s.name, value: s.id })))),
    new SlashCommandBuilder()
        .setName('stock')
        .setDescription('Ki·ªÉm tra s·ªë l∆∞·ª£ng t√†i kho·∫£n hi·ªán c√≥ trong kho.')
        .setDMPermission(false),
    new SlashCommandBuilder()
        .setName('stats')
        .setDescription('Hi·ªÉn th·ªã th·ªëng k√™ ho·∫°t ƒë·ªông c·ªßa bot tr√™n server n√†y.')
        .setDMPermission(false),
    new SlashCommandBuilder()
        .setName('clearstock')
        .setDescription('[Nguy hi·ªÉm] X√≥a T·∫§T C·∫¢ t√†i kho·∫£n c·ªßa m·ªôt d·ªãch v·ª• kh·ªèi kho.')
        .setDMPermission(false)
        .setDefaultMemberPermissions('0') // Y√™u c·∫ßu quy·ªÅn Administrator
        .addStringOption(option =>
            option.setName('service')
                .setDescription('Lo·∫°i d·ªãch v·ª• c·∫ßn x√≥a to√†n b·ªô t√†i kho·∫£n')
                .setRequired(true)
                .addChoices(...Object.values(SERVICE_CONFIG).map(s => ({ name: s.name, value: s.id }))))
].map(command => command.toJSON());

const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);

async function registerCommands() {
    try {
        console.log(`Started refreshing ${commands.length} application (/) commands.`);
        const data = await rest.put(
            Routes.applicationCommands(process.env.CLIENT_ID), // C·∫ßn CLIENT_ID
            { body: commands },
        );
        console.log(`Successfully reloaded ${data.length} application (/) commands.`);
    } catch (error) {
        console.error('Fatal: Could not register slash commands!', error);
    }
}


// =================================================================================================
// SECTION: X·ª¨ L√ù L·ªÜNH (COMMAND HANDLERS)
// =================================================================================================

async function handleSetup(interaction) {
    const logChannel = interaction.options.getChannel('log_channel');

    const roleSelect = new StringSelectMenuBuilder()
        .setCustomId('payout_role_select')
        .setPlaceholder('Ch·ªçn m·ªôt role ƒë·ªÉ c·∫•p quy·ªÅn Payout')
        .addOptions(
            interaction.guild.roles.cache
                .filter(role => !role.managed && role.id !== interaction.guild.id)
                .map(role => ({ label: role.name, value: role.id }))
                .slice(0, 25)
        );

    const row = new ActionRowBuilder().addComponents(roleSelect);
    const embed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle('‚öôÔ∏è C√†i ƒë·∫∑t Bot Payout')
        .setDescription('Vui l√≤ng ch·ªçn **Payout Role**. Nh·ªØng ng∆∞·ªùi c√≥ role n√†y s·∫Ω ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng c√°c l·ªánh `/gen`, `/addstock-bulk`, v√† `/stock`.');

    if (logChannel) {
        await setLogChannel(interaction.guild.id, logChannel.id);
        embed.addFields({ name: 'K√™nh Log', value: `Ho·∫°t ƒë·ªông c·ªßa bot s·∫Ω ƒë∆∞·ª£c ghi l·∫°i t·∫°i ${logChannel}.` });
    }

    await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
}

async function handleAddStockBulk(interaction) {
    if (!await hasPayoutPermission(interaction)) return;
    
    await interaction.deferReply({ ephemeral: true });

    const serviceType = interaction.options.getString('service');
    const attachment = interaction.options.getAttachment('file');

    if (!attachment.name.endsWith('.txt')) {
        return interaction.editReply({ content: 'L·ªói: Vui l√≤ng ch·ªâ t·∫£i l√™n file c√≥ ƒë·ªãnh d·∫°ng .txt.'});
    }

    try {
        const response = await fetch(attachment.url);
        const text = await response.text();
        const lines = text.split(/\r?\n/).filter(line => line.trim() !== '');
        
        const accounts = lines.map(line => {
            const parts = line.split(':');
            if (parts.length < 2) return null;
            return { email: parts[0].trim(), password: parts.slice(1).join(':').trim() };
        }).filter(acc => acc && acc.email && acc.password);

        if (accounts.length === 0) {
            return interaction.editReply({ content: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n h·ª£p l·ªá n√†o trong file (ƒë·ªãnh d·∫°ng `email:password`).' });
        }

        const { successCount, failureCount } = await addMultipleAccounts(interaction.guild.id, serviceType, accounts);
        
        const embed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('‚úÖ Th√™m h√†ng lo·∫°t th√†nh c√¥ng')
            .setDescription(`ƒê√£ x·ª≠ l√Ω **${lines.length}** d√≤ng t·ª´ file.`)
            .addFields(
                { name: 'Th√™m th√†nh c√¥ng', value: `**${successCount}** t√†i kho·∫£n`, inline: true },
                { name: 'B·ªè qua (tr√πng l·∫∑p)', value: `**${failureCount}** t√†i kho·∫£n`, inline: true }
            );
        await interaction.editReply({ embeds: [embed] });

        // G·ª≠i log
        const logEmbed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('üì¶ Stock Added (Bulk)')
            .setDescription(`**${interaction.user.tag}** ƒë√£ th√™m **${successCount}** t√†i kho·∫£n **${SERVICE_CONFIG[serviceType].name}**.`)
            .setTimestamp();
        await sendLog(interaction, logEmbed);

    } catch (error) {
        console.error('Error adding bulk stock:', error);
        await interaction.editReply({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file c·ªßa b·∫°n.'});
    }
}

async function handleGen(interaction) {
    if (!await hasPayoutPermission(interaction)) return;
    
    const serviceType = interaction.options.getString('service');
    const service = SERVICE_CONFIG[serviceType];
    const cooldowns = client.cooldowns;

    if (!cooldowns.has(interaction.commandName)) {
        cooldowns.set(interaction.commandName, new Collection());
    }

    const now = Date.now();
    const timestamps = cooldowns.get(interaction.commandName);
    const cooldownAmount = GEN_COOLDOWN_SECONDS * 1000;

    if (timestamps.has(interaction.user.id)) {
        const expirationTime = timestamps.get(interaction.user.id) + cooldownAmount;
        if (now < expirationTime) {
            const timeLeft = (expirationTime - now) / 1000;
            return interaction.reply({ content: `Vui l√≤ng ch·ªù **${timeLeft.toFixed(0)} gi√¢y** n·ªØa tr∆∞·ªõc khi s·ª≠ d·ª•ng l·∫°i l·ªánh \`/gen\`.`, ephemeral: true });
        }
    }

    timestamps.set(interaction.user.id, now);
    setTimeout(() => timestamps.delete(interaction.user.id), cooldownAmount);

    await interaction.deferReply({ ephemeral: true });

    const account = await getAndRemoveRandomAccount(interaction.guild.id, serviceType);

    if (!account) {
        const errorEmbed = new EmbedBuilder().setColor(0xFFCC00).setTitle(`H·∫øt h√†ng!`).setDescription(`R·∫•t ti·∫øc, d·ªãch v·ª• **${service.name}** ƒë√£ h·∫øt t√†i kho·∫£n. Vui l√≤ng quay l·∫°i sau.`);
        return interaction.editReply({ embeds: [errorEmbed] });
    }
    
    // Ghi l·∫°i giao d·ªãch V√ÄO DATABASE
    await addTransaction(interaction.guild.id, interaction.user.id, serviceType, account.email);

    const dmEmbed = new EmbedBuilder()
        .setColor(0x00FF00)
        .setTitle(`${service.emoji} T√†i kho·∫£n ${service.name} c·ªßa b·∫°n`)
        .setDescription(`ƒê√¢y l√† th√¥ng tin t√†i kho·∫£n b·∫°n y√™u c·∫ßu t·ª´ server **${interaction.guild.name}**.`)
        .addFields(
            { name: 'üìß Email', value: `\`\`\`${account.email}\`\`\`` },
            { name: 'üîë M·∫≠t kh·∫©u', value: `\`\`\`${account.password}\`\`\`` }
        )
        .setTimestamp()
        .setFooter({ text: 'Vui l√≤ng kh√¥ng chia s·∫ª t√†i kho·∫£n n√†y.' });
    
    if (service.id === 'fa' || service.id === 'xboxgp') {
        dmEmbed.addFields({ name: 'üîó H∆∞·ªõng d·∫´n Full Access', value: `[Nh·∫•n v√†o ƒë√¢y](${FULL_ACCESS_LINK})` });
    }

    try {
        await interaction.user.send({ embeds: [dmEmbed] });
        const successEmbed = new EmbedBuilder().setColor(0x00FF00).setTitle('‚úÖ Th√†nh c√¥ng!').setDescription(`Th√¥ng tin t√†i kho·∫£n **${service.name}** ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o tin nh·∫Øn ri√™ng c·ªßa b·∫°n.`);
        await interaction.editReply({ embeds: [successEmbed] });

        // G·ª≠i log
        const logEmbed = new EmbedBuilder()
            .setColor(0xFFA500) // Orange
            .setTitle('üéÅ Account Generated')
            .setDescription(`**${interaction.user.tag}** ƒë√£ nh·∫≠n m·ªôt t√†i kho·∫£n **${service.name}**.`)
            .addFields({ name: 'Email', value: `||${account.email}||`})
            .setTimestamp();
        await sendLog(interaction, logEmbed);

    } catch (error) {
        console.error(`Could not send DM to ${interaction.user.tag}.`, error);
        const dmErrorEmbed = new EmbedBuilder().setColor(0xFF0000).setTitle('‚ùå L·ªói g·ª≠i tin nh·∫Øn').setDescription('T√¥i kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn cho b·∫°n. Vui l√≤ng ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t quy·ªÅn ri√™ng t∆∞ c·ªßa b·∫°n.');
        await interaction.editReply({ embeds: [dmErrorEmbed] });
    }
}

async function handleStock(interaction) {
    if (!await hasPayoutPermission(interaction)) return;

    await interaction.deferReply({ ephemeral: true });
    const stockCounts = await getStockCount(interaction.guild.id);

    if (stockCounts.length === 0) {
        const embed = new EmbedBuilder().setColor(0xFFCC00).setTitle('Kho tr·ªëng').setDescription('Hi·ªán t·∫°i kh√¥ng c√≥ t√†i kho·∫£n n√†o trong kho.');
        return interaction.editReply({ embeds: [embed] });
    }

    const description = stockCounts
        .map(item => {
            const service = SERVICE_CONFIG[item.service_type];
            return `${service.emoji} ${service.name}: **${item.count}** t√†i kho·∫£n`;
        })
        .join('\n');

    const embed = new EmbedBuilder().setColor(0x00FF00).setTitle('üìä Th·ªëng k√™ kho t√†i kho·∫£n').setDescription(description).setTimestamp();
    await interaction.editReply({ embeds: [embed] });
}

async function handleStats(interaction) {
    if (!await hasPayoutPermission(interaction)) return;
    await interaction.deferReply({ ephemeral: true });

    const stats = await getBotStats(interaction.guild.id);
    const embed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle(`üìà Th·ªëng k√™ Bot cho ${interaction.guild.name}`)
        .addFields(
            { name: 'üì¶ T·ªïng t√†i kho·∫£n trong kho', value: `**${stats.totalStock}**`, inline: true },
            { name: 'üéÅ T·ªïng t√†i kho·∫£n ƒë√£ ph√°t', value: `**${stats.totalGenerated}**`, inline: true },
            { name: 'Uptime', value: `${Math.floor(client.uptime / 3600000)} gi·ªù ${Math.floor((client.uptime % 3600000) / 60000)} ph√∫t`, inline: true}
        )
        .setTimestamp();
    
    await interaction.editReply({ embeds: [embed] });
}

async function handleClearStock(interaction) {
    const serviceType = interaction.options.getString('service');
    const service = SERVICE_CONFIG[serviceType];

    const confirmButton = new ButtonBuilder().setCustomId(`confirm_clear_${serviceType}`).setLabel('ƒê·ªìng √Ω X√≥a!').setStyle(ButtonStyle.Danger);
    const cancelButton = new ButtonBuilder().setCustomId('cancel_clear').setLabel('H·ªßy').setStyle(ButtonStyle.Secondary);
    const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

    const embed = new EmbedBuilder()
        .setColor(0xFF0000)
        .setTitle(`‚ö†Ô∏è X√ÅC NH·∫¨N H√ÄNH ƒê·ªòNG NGUY HI·ªÇM ‚ö†Ô∏è`)
        .setDescription(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën **X√ìA T·∫§T C·∫¢** t√†i kho·∫£n **${service.name}** kh·ªèi kho kh√¥ng? H√†nh ƒë·ªông n√†y **KH√îNG TH·ªÇ** ho√†n t√°c!`);

    await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
}


// =================================================================================================
// SECTION: L·∫ÆNG NGHE S·ª∞ KI·ªÜN (EVENT LISTENERS)
// =================================================================================================

client.once('ready', async () => {
    if (!process.env.CLIENT_ID) {
        console.error('FATAL: CLIENT_ID is not defined in .env file!');
        process.exit(1);
    }
    console.log(`Logged in as ${client.user.tag}!`);
    await initializeDatabase();
    await registerCommands();
});

client.on('interactionCreate', async (interaction) => {
    try {
        if (interaction.isChatInputCommand()) {
            const commandHandlers = {
                'setup': handleSetup,
                'addstock-bulk': handleAddStockBulk,
                'gen': handleGen,
                'stock': handleStock,
                'stats': handleStats,
                'clearstock': handleClearStock,
            };
            if (commandHandlers[interaction.commandName]) {
                await commandHandlers[interaction.commandName](interaction);
            }
        } else if (interaction.isStringSelectMenu()) {
            if (interaction.customId === 'payout_role_select') {
                await interaction.deferUpdate();
                const roleId = interaction.values[0];
                await setGuildSettings(interaction.guild.id, roleId);
                const successEmbed = new EmbedBuilder().setColor(0x00FF00).setTitle('‚úÖ C√†i ƒë·∫∑t th√†nh c√¥ng').setDescription(`Role Payout ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh <@&${roleId}>.`);
                await interaction.editReply({ embeds: [successEmbed], components: [] });
            }
        } else if (interaction.isButton()) {
            if (interaction.customId.startsWith('confirm_clear_')) {
                const serviceType = interaction.customId.replace('confirm_clear_', '');
                const service = SERVICE_CONFIG[serviceType];
                const deletedCount = await clearStockForService(interaction.guild.id, serviceType);

                const embed = new EmbedBuilder().setColor(0x00FF00).setTitle('‚úÖ Ho√†n t·∫•t').setDescription(`ƒê√£ x√≥a th√†nh c√¥ng **${deletedCount}** t√†i kho·∫£n **${service.name}**.`);
                await interaction.update({ embeds: [embed], components: [] });

                // G·ª≠i log
                const logEmbed = new EmbedBuilder().setColor(0xFF0000).setTitle('üóëÔ∏è Stock Cleared').setDescription(`**${interaction.user.tag}** ƒë√£ x√≥a **${deletedCount}** t√†i kho·∫£n **${service.name}**.`).setTimestamp();
                await sendLog(interaction, logEmbed);

            } else if (interaction.customId === 'cancel_clear') {
                const embed = new EmbedBuilder().setColor(0xAAAAAA).setTitle('H·ªßy b·ªè').setDescription('H√†nh ƒë·ªông x√≥a kho ƒë√£ ƒë∆∞·ª£c h·ªßy.');
                await interaction.update({ embeds: [embed], components: [] });
            }
        }
    } catch (error) {
        console.error('An error occurred during interaction processing:', error);
        const errorEmbed = new EmbedBuilder().setColor(0xFF0000).setTitle('üí• ƒê√£ x·∫£y ra l·ªói').setDescription('ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
        if (interaction.replied || interaction.deferred) {
            await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
        } else {
            await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }
    }
});


// =================================================================================================
// SECTION: ƒêƒÇNG NH·∫¨P BOT
// =================================================================================================

const token = process.env.DISCORD_TOKEN;
if (!token) {
    console.error("FATAL: DISCORD_TOKEN is not defined in .env file. Bot cannot start.");
    process.exit(1);
}
client.login(token);

